{
    "swagger": "2.0",
    "info": {
        "version": "2017-10-30T23:30:18Z",
        "title": "Code Quality APIs",
        "description": "APIs for Code Quality and Vulnerability Reports"
    },
    "host": "cloud-api.corporate.t-mobile.com",
    "basePath": "/jazz",
    "schemes": ["https"],
    "paths": {
        "/codeq": {
            "options": {
                "description": "CORS Support",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["CORS"],
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/400ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/404ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/500ErrorResponse"
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseTemplates": {
                                "application/json": "$input.json('$')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,HEAD'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get code quality report for a given service in the specified environment",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "name": "physicalId",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "description": "branch name"
                    },
                    {
                        "name": "metrics",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "comma delimited list of metrics"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "the start date (ISO 8601 format) for which the data is requested"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "the end date (ISO 8601 format) upto which the data is desired"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "required": false,
                        "type": "number",
                        "description": "page number of the result set."
                    },
                    {
                        "name": "Jazz-Service-ID",
                        "in": "header",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "serviceRepoUrl",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "description": "the service repository url"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Execution",
                        "schema": {
                            "$ref": "#/definitions/GetSuccessResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/400ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/401ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/403ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/404ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/500ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [{
                    "Jazz_ACL-Authorizer": []
                }],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "uri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{lambda_function_name}/invocations",
                    "httpMethod": "POST",
                    "credentials": "{conf-role}",
                    "requestTemplates": {
                        "application/json": "\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $input.json(\"$\"),\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n  \"resourcePath\" : \"$context.resourcePath\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}",
                        "application/x-www-form-urlencoded": "\n#define( $body )\n  {\n  #foreach( $token in $input.path('$').split('&') )\n    #set( $keyVal = $token.split('=') )\n    #set( $keyValSize = $keyVal.size() )\n    #if( $keyValSize >= 1 )\n      #set( $key = $util.urlDecode($keyVal[0]) )\n      #if( $keyValSize >= 2 )\n        #set( $val = $util.urlDecode($keyVal[1]) )\n      #else\n        #set( $val = '' )\n      #end\n      \"$key\": \"$val\"#if($foreach.hasNext),#end\n    #end\n  #end\n  }\n#end\n\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $body,\n \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n  \"resourcePath\" : \"$context.resourcePath\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n  \n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}"
                    },
                    "responses": {
                        ".*Process exited before completing request.*": {
                            "statusCode": "503",
                            "responseTemplates": {
                                "application/json": "{\n  \"errorType\":\"ServiceUnavailable\",\n  \"message\": \"Unknown internal error occurred\"\n}\n"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"InternalServerError\".*": {
                            "statusCode": "500",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"BadRequest\".*": {
                            "statusCode": "400",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"Unauthorized\".*": {
                            "statusCode": "401",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"Forbidden\".*": {
                            "statusCode": "403",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"NotFound\".*": {
                            "statusCode": "404",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    }
                }
            }
        },
        "/codeq/help": {
            "options": {
                "description": "CORS Support",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "tags": ["CORS"],
                "responses": {
                    "200": {
                        "description": "Default response for CORS method",
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/400ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/404ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/500ErrorResponse"
                        }
                    }
                },
                "x-amazon-apigateway-integration": {
                    "type": "mock",
                    "requestTemplates": {
                        "application/json": "{\"statusCode\" : 200}"
                    },
                    "responses": {
                        "default": {
                            "statusCode": "200",
                            "responseTemplates": {
                                "application/json": "$input.json('$')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,HEAD'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Get metrics meta-data for code quality reports ",
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [{
                        "name": "metrics",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "comma delimited list of metrics. If empty returns all metrics."
                    },
                    {
                        "name": "Jazz-Service-ID",
                        "in": "header",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Execution",
                        "schema": {
                            "$ref": "#/definitions/GetMetricsMetadata"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/400ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/401ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/403ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/404ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/500ErrorResponse"
                        },
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Methods": {
                                "type": "string"
                            },
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    }
                },
                "security": [{
                    "jazz_custom-ad-authorizer": []
                }],
                "x-amazon-apigateway-integration": {
                    "type": "aws",
                    "uri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:{lambda_function_name}/invocations",
                    "httpMethod": "POST",
                    "credentials": "{conf-role}",
                    "requestTemplates": {
                        "application/json": "\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $input.json(\"$\"),\n  \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n  \"resourcePath\" : \"$context.resourcePath\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n\n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}",
                        "application/x-www-form-urlencoded": "\n#define( $body )\n  {\n  #foreach( $token in $input.path('$').split('&') )\n    #set( $keyVal = $token.split('=') )\n    #set( $keyValSize = $keyVal.size() )\n    #if( $keyValSize >= 1 )\n      #set( $key = $util.urlDecode($keyVal[0]) )\n      #if( $keyValSize >= 2 )\n        #set( $val = $util.urlDecode($keyVal[1]) )\n      #else\n        #set( $val = '' )\n      #end\n      \"$key\": \"$val\"#if($foreach.hasNext),#end\n    #end\n  #end\n  }\n#end\n\n#define( $loop )\n  {\n  #foreach($key in $map.keySet())\n      \"$util.escapeJavaScript($key)\":\n        \"$util.escapeJavaScript($map.get($key))\"\n        #if( $foreach.hasNext ) , #end\n  #end\n  }\n#end\n\n{\n  \"body\": $body,\n \"method\": \"$context.httpMethod\",\n  \"principalId\": \"$context.authorizer.principalId\",\n  \"stage\": \"$context.stage\",\n  \"resourcePath\" : \"$context.resourcePath\",\n\n  #set( $map = $input.params().header )\n  \"headers\": $loop,\n\n  #set( $map = $input.params().querystring )\n  \"query\": $loop,\n\n  #set( $map = $input.params().path )\n  \"path\": $loop,\n\n  #set( $map = $context.identity )\n  \"identity\": $loop,\n  \n  #set( $map = $stageVariables )\n  \"stageVariables\": $loop\n}"
                    },
                    "responses": {
                        ".*Process exited before completing request.*": {
                            "statusCode": "503",
                            "responseTemplates": {
                                "application/json": "{\n  \"errorType\":\"ServiceUnavailable\",\n  \"message\": \"Unknown internal error occurred\"\n}\n"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"InternalServerError\".*": {
                            "statusCode": "500",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"BadRequest\".*": {
                            "statusCode": "400",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        "default": {
                            "statusCode": "200",
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"Unauthorized\".*": {
                            "statusCode": "401",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"Forbidden\".*": {
                            "statusCode": "403",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        },
                        ".*\"NotFound\".*": {
                            "statusCode": "404",
                            "responseTemplates": {
                                "application/json": "$input.path('$.errorMessage')"
                            },
                            "responseParameters": {
                                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Jazz-Service-ID'",
                                "method.response.header.Access-Control-Allow-Methods": "'*'",
                                "method.response.header.Access-Control-Allow-Origin": "'*'"
                            }
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "Jazz_ACL-Authorizer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "x-amazon-apigateway-authtype": "custom",
            "x-amazon-apigateway-authorizer": {
                "authorizerCredentials": "{conf-role}",
                "authorizerResultTtlInSeconds": 0,
                "authorizerUri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:jazz_acl-authorizer_prod/invocations",
                "type": "request"
            }
        },
        "jazz_custom-ad-authorizer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "x-amazon-apigateway-authtype": "custom",
            "x-amazon-apigateway-authorizer": {
                "authorizerCredentials": "{conf-role}",
                "authorizerResultTtlInSeconds": 0,
                "authorizerUri": "arn:aws:apigateway:{conf-region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{conf-region}:{conf-accId}:function:jazz_custom-ad-authorizer_prod/invocations",
                "type": "token"
            }
        }
    },
    "definitions": {
        "400ErrorResponse": {
            "type": "object",
            "properties": {
                "error_type": {
                    "type": "string",
                    "default": "Bad Request format"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "401ErrorResponse": {
            "type": "object",
            "properties": {
                "errorType": {
                    "type": "string",
                    "default": "Unauthorized"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "403ErrorResponse": {
            "type": "object",
            "properties": {
                "errorType": {
                    "type": "string",
                    "default": "Forbidden"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "404ErrorResponse": {
            "type": "object",
            "properties": {
                "error_type": {
                    "type": "string",
                    "default": "Resource Not Found"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "500ErrorResponse": {
            "type": "object",
            "properties": {
                "error_type": {
                    "type": "string",
                    "default": "Internal Server Error"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "MetricData": {
            "type": "object",
            "description": "Generic metric data object representing a value in time",
            "properties": {
                "ts": {
                    "type": "string",
                    "description": "timestamp for value"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the metric"
                }
            }
        },
        "Metric": {
            "type": "object",
            "description": "Generic metric object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the metric"
                },
                "link": {
                    "type": "string",
                    "description": "link with details about this metric"
                },
                "values": {
                    "type": "array",
                    "description": "metric data",
                    "items": {
                        "$ref": "#/definitions/MetricData"
                    }
                }
            }
        },
        "CodeQualityData": {
            "type": "object",
            "description": "Code Quality data for a service in the specified environment",
            "properties": {
                "metrics": {
                    "type": "array",
                    "description": "list of metrics",
                    "items": {
                        "$ref": "#/definitions/Metric"
                    }
                }
            }
        },
        "MetricDefinition": {
            "type": "object",
            "description": "Metric definition",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the metric"
                },
                "description": {
                    "type": "string",
                    "description": "description of this metric"
                },
                "unit": {
                    "type": "string",
                    "description": "unit of measurement for this metric"
                },
                "minValue": {
                    "type": "string",
                    "description": "min value for this metric. This can be empty indicating there is no min"
                },
                "maxValue": {
                    "type": "string",
                    "description": "max value for this metric. This can be empty indicating there is no max"
                }
            }
        },
        "MetricDefinitions": {
            "type": "object",
            "description": "Code Quality metric definitions",
            "properties": {
                "metrics": {
                    "type": "array",
                    "description": "list of metrics",
                    "items": {
                        "$ref": "#/definitions/MetricDefinition"
                    }
                }
            }
        },
        "GetSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CodeQualityData"
                    }
                },
                "input": {
                    "type": "object",
                    "properties": {
                        "physicalId": {
                            "type": "string",
                            "description": "branch name"
                        },
                        "metrics": {
                            "type": "string",
                            "description": "comma delimited list of metrics"
                        },
                        "from": {
                            "type": "string",
                            "description": "the data is from this date"
                        },
                        "to": {
                            "type": "string",
                            "description": "the data is upto this date"
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "the gitlab project ID for the service"
                }
            },
            "description": "200 Success Response payload for get code quality data"
        },
        "GetMetricsMetadata": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MetricDefinitions"
                    }
                },
                "input": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "string",
                            "description": "comma delimited list of metrics"
                        }
                    }
                }
            },
            "description": "200 Success Response payload for Metric Definition(s)"
        }
    }
}
