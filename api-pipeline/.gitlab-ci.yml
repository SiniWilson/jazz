


#exclude running pipeline on pushes for all jobs
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always

stages:
  - tmo
  # - test
  - initialize
  - build
  - test
  - code-scan
  - deployment
  - deployment-approval
  - production-deployment

# Ref: https://docs.gitlab.com/ee/user/project/new_ci_build_permissions_model.html#dependent-repositories
# - echo -e "machine gitlab.com\nlogin git\npassword ${GITLAB_SVC_ACCT_PASSWORD}" > ~/.netrc
.netrc: &setnetrc
  - echo -e "machine gitlab.com\nlogin gitlab-ci-token\npassword ${CI_JOB_TOKEN}" > ~/.netrc

variables:
  API_BASE_URL: https://cloud-api.corporate.t-mobile.com/api/jazz
  SCRIPTS_REPO: https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/jazz-pipeline-module.git
  SERVERLESS_CONFIG_REPO:  https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/serverless-config-pack.git
  APIGATEWAY_LAMBDA_INTEGRATION_REPO:  https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/aws-apigateway-lambda-integration-spec.git
  INITIALIZE_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/groovy-npm-lite:1.0.0
  DEPLOYMENT_APPROVAL_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/groovy-npm-lite:1.0.0
  BUILD_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/groovy-test:1.0.0
  UNIT_TEST_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/groovy-test:1.0.0
  DEPLOYMENT_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/sls-api:1.0.0
  PRODUCTION_DEPLOYMENT_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/sls-api:1.0.0
  CODE_SCAN_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/sonar-cdp:1.0.0
  WORKING_DIRECTORY: WorkingDirectory
  WORKING_MODULE_DIRECTORY: $WORKING_DIRECTORY/jazz-pipeline-module
  EVENT_HANDLER: GITLAB_CI
  EVENT_TYPE: SERVICE_DEPLOYMENT
  AWS_DEFAULT_REGION: us-west-2

#@Pipeline trigger params {REPO_URL, REPO_BRANCH, REPO_NAME, COMMIT_SHA), REQUEST_ID - Optional

initialize:
  stage: initialize
  image: $INITIALIZE_IMAGE
  script: 
    - *setnetrc
    - echo "CI_PIPELINE_SOURCE=  $CI_PIPELINE_SOURCE"
    - bash scripts/LoadConfigs.sh   
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

build:
  stage: build
  image: $BUILD_IMAGE
  script:
    - *setnetrc
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy buildLambda || exit 1
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

unit-test:
  stage: test
  image: $UNIT_TEST_IMAGE   
  script: 
    - *setnetrc
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy runUnitTestCases || exit 1
  dependencies:
    - build   
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

code-scan:
  #image: sonarsource/sonar-scanner-cli
  image: $CODE_SCAN_IMAGE
  stage: code-scan
  variables:
    SONAR_BRANCH_NAME: $REPO_BRANCH
  script: 
    - *setnetrc
    - cd WorkingDirectory/${REPO_NAME}
    - updateJavaCACerts
    - cd ../../
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy codeQualityCheck || exit 1
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

deployment:
  stage: deployment
  image: $DEPLOYMENT_IMAGE  
  script:
    - *setnetrc
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy configDeployment || exit 1
  dependencies:
    - build 
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

approval:
  stage: deployment-approval
  image: $DEPLOYMENT_APPROVAL_IMAGE
  script:
    - *setnetrc
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy configureProductionDeploy || exit 1
  rules:
    - if: '$REPO_BRANCH == "master"'
      when: on_success 
  dependencies:
    - deployment   
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY

production-deployment:
  stage: production-deployment
  image: $PRODUCTION_DEPLOYMENT_IMAGE
  script:
    - *setnetrc 
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/DeployApiUtilityModule.groovy productionDeploy  || exit 1   
  rules:
    - if: '$REPO_BRANCH == "master"'
      when: delayed
      start_in: '1 day'
      allow_failure: false
  dependencies:
    - approval
  environment:
    name: production   
  artifacts:
    when: always
    paths:
      - $WORKING_DIRECTORY
