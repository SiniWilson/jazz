# serverless-build-rules.yml

# tag-name
#   sbr-type: a mandatory type of the tag it can be primitive (int, bool, str, enum) conventional (aws-id, aws-artifact-name, aws-var-name, path, ... )
#             or composed having the reference to some other complex type described inside the file.
#             It can also describe arrays with square brackets like [int] and maps with the square brackets and colon like that [aws-var-name:path]
#   sbr-render: a mandatory enum that can contain the values as follows: config-only or user-only or config-wins (if both specified and mismatched),
#               user-wins or exception-on-mismatch or merge (only applicable for map and array types of configurable type)
#   sbr-primary: an optional true or false that means whether this tag can be used inside the file directly or it is just used for the complex type description like in case of function, the default value is true
#   sbr-constraint: an optional value contains the path inside the whitelist.yml that the value can be assigned to like 'whitelist.yml/resources' or 'whitelist.yml/actions'
#                   or the list of enum values that they can be assigned to or ranges of ints
#   sbr-enum: a child of sbr-constraint containing the list of values the tag can accept
#   sbr-from: a child of sbr-constraint containing the lowest/minimal value the integer value can be assigned to
#   sbr-to: a child of sbr-constraint containing the highest/maximum value the integer value can be assigned to
#   sbr-whitelist: a child of sbr-constraint containing a section of whitelist.yml where the values can be selected from
#   sbr-value: an optional value that contains the formula or formulas to calculate the config driven values to be inserted
#   sbr-example: is a child of sbr-value. It is designated to store the default value for tag
#   sbr-formula:  is a child of sbr-value. It is designated to store the formula that derives the value from the set of config values and inline constants
#   sbr-template: is used instead of value in non-primary rules and itself contains the sub-set of rules because it cannot be represented by a single value
#   sbr-mandatory: indicates whether the field must be inserted inside the output file no matter whether it exists in the user's original file or not
#                  only primary config-only, config-wins and merge rendered fields can have a mandatory status

service:
  name:
    sbr-type: aws-artifact-name
    sbr-render: config-only
    sbr-value:
      sbr-formula: ${context.INSTANCE_PREFIX}-${config.domain}--${config.service}
    sbr-mandatory: true

  awsKmsKeyArn:
    sbr-type: arn-kms
    sbr-render: user-only
    sbr-value:
      sbr-example: 'arn:aws:kms:us-east-1:XXXXXX:key/some-hash'

frameworkVersion:
  sbr-type: str
  sbr-render: config-wins
  sbr-mandatory: true
  sbr-value:
    sbr-formula: ${context.serverless_framework_version}
    sbr-example: '>=1.0.0 <3.0.0'


custom:
  sbr-type: "[aws-var-name:aws-tag-value]"
  sbr-render: merge
  sbr-mandatory: true
  sbr-value:
    sbr-example:
      key1: value1
      key2: value2

provider:
  name:
    sbr-type: enum
    sbr-render: config-wins
    sbr-constraint:
      sbr-enum:
        - aws
        - azure
    sbr-value:
      sbr-formula: ${context.cloud_provider}
      sbr-example: aws
    sbr-mandatory: true

  runtime:
    sbr-type: enum
    sbr-render: user-wins
    sbr-constraint:
      sbr-enum:
        - nodejs8.10
        - nodejs10.x
        - nodejs12.x
        - java8
        - java11
        - python3.6
        - python3.8
        - go1.x
    sbr-value:
      sbr-formula: ${config.providerRuntime}
      sbr-example: nodejs10.x
    sbr-mandatory: true

  httpApi:
    id: #ID to attach to externally created HTTP API
      sbr-type: aws-artifact-name
      sbr-render: user-only
      sbr-value:
        sbr-example: 'my-id'
    name: # Use custom name for the API Gateway API, default is ${opt:stage, self:provider.stage, 'dev'}-${self:service}
      sbr-type: aws-artifact-name
      sbr-render: user-only
      sbr-value:
        sbr-example: 'dev-my-service'
    payload: # Specify payload format version for Lambda integration ('1.0' or '2.0'), default is '1.0'
      sbr-type: aws-artifact-name
      sbr-render: user-only
      sbr-value:
        sbr-example: '1.0'
    cors: # Implies default behavior, can be fine tuned with specficic options
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-example: true
    authorizers: # JWT authorizers to back HTTP API endpoints
      sbr-type: "[aws-var-name:aws-var-value]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          someJwtAuthorizer:
          identitySource: $request.header.Authorization
          issuerUrl: https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}
          audience:
            - ${client1Id}
            - ${client2Id}

  stage: # It will be setup automagically so you may not want to touch it
    sbr-type: deployment-stage
    sbr-render: config-wins
    sbr-mandatory: true
    sbr-value:
      sbr-formula: ${context.environment_logical_id}
      sbr-example: dev

  region:
    sbr-type: enum
    sbr-render: config-wins
    sbr-mandatory: true
    sbr-constraint:
      sbr-enum:
        - 'us-east-2'
        - 'us-east-1'
        - 'us-west-1'
        - 'us-west-2'
        - 'ap-south-1'
        - 'ap-northeast-3'
        - 'ap-northeast-2'
        - 'ap-southeast-1'
        - 'ap-southeast-2'
        - 'ap-northeast-1'
        - 'ca-central-1'
        - 'cn-north-1'
        - 'cn-northwest-1'
        - 'eu-central-1'
        - 'eu-west-1'
        - 'eu-west-2'
        - 'eu-west-3'
        - 'eu-north-1'
        - 'sa-east-1'
        - 'us-gov-east-1'
        - 'us-gov-west-1'
    sbr-value:
      sbr-formula: ${context.REGION}
      sbr-example: 'us-east-1'

  stackName:
    sbr-type: aws-artifact-name
    sbr-render: config-wins
    sbr-value:
      sbr-formula: ${config.domain}-${config.service}-${context.environment_logical_id}
      sbr-example: custom-stack-name # Use a custom name for the CloudFormation stack

  apiName:
    sbr-type: aws-artifact-name
    sbr-render: user-only
    sbr-value:
      sbr-example: custom-api-name # Use a custom name for the API Gateway API

  websocketsApiName:
    sbr-type: aws-artifact-name
    sbr-render: user-only
    sbr-value:
      sbr-example: custom-websockets-api-name # Use a custom name for the websockets API

  websocketsApiRouteSelectionExpression:
    sbr-type: aws-artifact-name
    sbr-render: user-only
    sbr-value:
      sbr-example: $request.body.route # custom route selection expression

  memorySize: # in MB
    sbr-type: int
    sbr-render: user-wins
    sbr-mandatory: true
    sbr-constraint:
      sbr-from: 128
      sbr-to: 10240
    sbr-value:
      sbr-formula: ${config.providerMemorySize}
      sbr-example: 256

  reservedConcurrency:
    sbr-type: int
    sbr-render: user-only
    sbr-constraint:
      sbr-from: 0
      sbr-to: 100
    sbr-value:
      sbr-example: 5

  timeout: # in seconds 1 sec to 15 mins
    sbr-type: int
    sbr-render: user-wins
    sbr-mandatory: true
    sbr-constraint:
      sbr-from: 1
      sbr-to: 900
    sbr-value:
      sbr-example: 30
  
  logs:
    restApi: # Optional configuration to enable Rest API logs. This can either be set to `true` to use defaults, or configured via subproperties (TBD).
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-example: false
    websocket: # Optional configuration to enable Websocket logs. This can either be set to `true` to use defaults, or configured via subproperties (TBD).
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-example: false
    httpApi: # Optional configuration to enable HTTP API logs. This can either be set to `true` to use defaults, or configured via subproperties (TBD).
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-example: false

  logRetentionInDays:  # Set the default RetentionInDays for a CloudWatch LogGroup
    sbr-type: enum
    sbr-render: user-wins
    sbr-mandatory: true
    sbr-constraint:
      sbr-enum:
        - '1'
        - '3'
        - '5'
        - '7'
        - '14'
        - '30'
        - '60'
        - '90'
        - '120'
        - '150'
        - '180'
        - '365'
    sbr-value:
      sbr-formula: ${context.logRetentionInDays}
      sbr-example: '14'
  
  deploymentBucket: # Deployment bucket name. Default is generated by the framework
    name:
      sbr-type: aws-bucket-name
      sbr-render: config-wins
      sbr-mandatory: true
      sbr-value:
        sbr-formula: _${opt:bucket} # Mind the _ that will prevent the ${} from resolving
        sbr-example: com.serverless.${self:provider.region}.deploys

    ## Disabled serverSideEncryption for deployment artifacts. 
    ## Enable it if required for compliance
    # serverSideEncryption:
    #   sbr-type: enum
    #   sbr-render: user-only
    #   sbr-constraint:
    #     sbr-enum:
    #       - AES256
    #       - AWSKMS
    #   sbr-value:
    #     sbr-example: AES256


    tags: # Tags that will be added to each of the deployment resources
      sbr-type: "[aws-var-name:aws-tag-value]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          key1: value1
          key2: value2


  deploymentPrefix: # The S3 prefix under which deployed artifacts should be stored. Default is serverless
    sbr-type: aws-bucket-name
    sbr-render: config-wins
    sbr-value:
      sbr-example: serverless

  role: # none provided in config, serverless creates if not user provided
    sbr-type: arn-iam
    sbr-render: user-only
    sbr-value:
      sbr-formula: ${config.role}
      sbr-example: arn:aws:iam::XXXXXX:role/role

  cfnRole:  # ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials
    sbr-type: arn-iam
    sbr-render: user-only
    sbr-value:
      sbr-example: arn:aws:iam::XXXXXX:role/role

  versionFunctions: # Optional function versioning
    sbr-type: bool
    sbr-render: user-only
    sbr-value:
      sbr-example: false

  environment: # Service wide environment variables
    sbr-type: "[aws-var-name:aws-tag-value]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        serviceEnvVar: 123456789

  endpointType: # Optional endpoint configuration for API Gateway REST API. Default is Edge.
    sbr-type: enum
    sbr-render: user-only
    sbr-constraint:
      sbr-enum:
        - EDGE
        - REGIONAL
        - PRIVATE
    sbr-value:
      sbr-example: regional

  apiKeys: # List of API keys to be used by your service API Gateway REST API
    sbr-type: "[aws-artifact-name]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - myFirstKey
        - ${opt:stage}-myFirstKey
        - ${env:MY_API_KEY} # you can hide it in a serverless variable

  apiGateway: # Optional API Gateway global config
    restApiId: # REST API resource ID. Default is generated by the framework
      sbr-type: aws-id
      sbr-render: user-only
      sbr-value:
        sbr-example: xxxxxxxxxx

    restApiRootResourceId: # REST API resource ID. Default is generated by the framework
      sbr-type: aws-id
      sbr-render: user-only
      sbr-value:
        sbr-example: xxxxxxxxxx

    restApiResources: # List of existing resources that were created in the REST API. This is required or the stack will be conflicted
      sbr-type: "[path:aws-id]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          '/users': xxxxxxxxxx
          '/users/create': xxxxxxxxxx

    websocketApiId: # Existing id for a Websocket resource.
      sbr-type: aws-id
      sbr-render: user-only
      sbr-value:
        sbr-example: xxxxxxxxxx
    
    apiKeySourceType: # Source of API key for usage plan. HEADER or AUTHORIZER.
      sbr-type: enum
      sbr-render: user-only
      sbr-constraint:
        sbr-enum:
          - HEADER
          - AUTHORIZER
      sbr-value:
        sbr-example: HEADER

    minimumCompressionSize: # Compress response when larger than specified size in bytes (must be between 0 and 10485760)
      sbr-type: int
      sbr-render: user-only
      sbr-constraint:
        sbr-from: 512
        sbr-to: 10485760
      sbr-value:
        sbr-example: 1024

    description: # optional description for the API Gateway stage deployment
      sbr-type: str
      sbr-render: user-only
      sbr-value:
        sbr-example: Some Description

    binaryMediaTypes: # Optional binary media types the API might return
      sbr-type: str
      sbr-render: user-only
      sbr-value:
        sbr-example:
          - '*/*'
          - 'image/png'

    metrics: # Optional detailed Cloud Watch Metrics
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-example: false

  usagePlan: # Optional usage plan configuration
    quota:
      limit:
        sbr-type: int
        sbr-render: user-only
        sbr-value:
          sbr-example: 5000
      offset:
        sbr-type: int
        sbr-render: user-only
        sbr-value:
          sbr-example: 2

      period:
        sbr-type: enum
        sbr-render: user-only
        sbr-constraint:
          sbr-enum:
            - MONTH
            - WEEK
            - DAY
        sbr-value:
          sbr-example: WEEK

    throttle:
      burstLimit:
        sbr-type: int
        sbr-render: user-only
        sbr-value:
          sbr-example: 200

      rateLimit:
        sbr-type: int
        sbr-render: user-only
        sbr-value:
          sbr-example: 100


  stackTags:
    sbr-type: "[aws-var-name:aws-tag-value]"
    sbr-render: merge
    sbr-mandatory: true
    sbr-value:
      sbr-formula:
        Application: ${config.appTag}
        Platform: ${context.INSTANCE_PREFIX}
        Service: ${config.service}
        Domain: ${config.domain}
        Owner: ${config.owner}
        Environment: ${context.envTag}
        EnvironmentId: ${context.environment_logical_id}
        GitCommitHash: ${context.git_commit_hash}
      sbr-example:
        key: value

  iamManagedPolicies: # Optional IAM Managed Policies, which allows to include the policies into IAM Role
    sbr-type: "[arn-iam-policy]"
    sbr-render: merge
    sbr-constraint:
        sbr-whitelist: iamManagedPolicies    
    sbr-value:
      # sbr-formula: 
        # - ${config.iamManagedPolicies} # Keep the config.iamManagedPolicies as a LIST
      sbr-example:
        - arn:aws:iam:*****:policy/some-managed-policy

  iamRoleStatements: # IAM role statements so that services can be accessed in the AWS account
    sbr-type: "[arn-iam-policy]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: ServerlessDeploymentBucket


  stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
    sbr-type: "[aws-policy]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - Effect: Allow
          Principal: "*"
          Action: "Update:*"
          Resource: "*"
        - Effect: Deny
          Principal: "*"
          Resource: "*"
          Action:
            - Update:Replace
            - Update:Delete
          Condition:
            StringEquals:
              ResourceType:
                - AWS::EC2::Instance

  vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
    securityGroupIds:
      sbr-type: "[aws-id]"
      sbr-render: user-wins # user provided overrides config
      sbr-value:
        # sbr-formula: ${context.securityGroupIds} 
        # array values don't work as expected in sbr-formula hence injecting outside SBR
        sbr-example:
         - securityGroupId1
         - securityGroupId2
    subnetIds:
      sbr-type: "[aws-id]"
      sbr-render: user-wins # user provided overrides config
      sbr-value:
        # sbr-formula: ${context.subnetIds} 
        # array values don't work as expected in sbr-formula hence injecting outside SBR
        sbr-example:
         - subnetId1
         - subnetId2

  notificationArns: # List of existing Amazon SNS topics in the same region where notifications about stack events are sent.
    sbr-type: "[aws-id]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - 'arn:aws:sns:us-east-1:XXXXXX:mytopic'

  vpcEndpointIds: # List of vpcEndpointIds associated with PRIVATE API Gateway REST API
    sbr-type: "[aws-id]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - 'vpce-123'
        - 'vpce-456'

  resourcePolicy:
    sbr-type: "[aws-policy]"
    sbr-render: user-only 

  tags: # Optional service wide function tags
    sbr-type: "[aws-var-name:aws-tag-value]"
    sbr-render: merge
    sbr-value:
      sbr-formula:
        Application: ${config.appTag}
        Platform: ${context.INSTANCE_PREFIX}
        Service: ${config.service}
        Domain: ${config.domain}
        Owner: ${config.owner}
        Environment: ${context.envTag}
        EnvironmentId: ${context.environment_logical_id}
        GitCommitHash: ${context.git_commit_hash}
      sbr-example:
        key: value

configValidationMode: # https://www.serverless.com/framework/docs/configuration-validation/
  sbr-type: enum
  sbr-render: user-wins
  sbr-mandatory: true
  sbr-constraint:
    sbr-enum:
      - error
      - off
      - warn
  sbr-value:
    sbr-example: error

package: # Optional deployment packaging configuration
  include: # Specify the directories and files which should be included in the deployment package
    sbr-type: "[path]"
    sbr-render: user-only
    sbr-value:
      sbr-example:
        - .git/**
        - .travis.yml
  exclude: # Specify the directories and files which should be excluded in the deployment package
    sbr-type: "[path]"
    sbr-render: merge
    sbr-mandatory: true
    sbr-value:
      sbr-formula:
        - ${config.commonExcludes} 
      sbr-example:
        - .git/**
        - .travis.yml
  excludeDevDependencies:
    sbr-type: bool
    sbr-render: user-only
    sbr-value:
      sbr-default: false
      sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true
  artifact:
    sbr-type: path
    sbr-render: user-only
    sbr-value:
      sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.

  individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false
    sbr-type: bool
    sbr-render: user-only
    sbr-value:
      sbr-default: false
      sbr-example: false

functions:
  sbr-type: "[aws-var-name:function]"
  sbr-render: user-only

stepFunctions: # https://github.com/serverless-operations/serverless-step-functions
  stateMachines:
    sbr-type: "[path]" # TODO - Should be replaced with a new type to validate everything that goes under stepFunctions>>stateMachines. Need a new validator!
    sbr-render: user-only
  validate: # State machine definition will be validated during deployment by StepFunctions. Defaults to true, set it to false if needs to be skipped.
    sbr-type: bool
    sbr-render: user-only
    sbr-value:
      sbr-default: true
      sbr-example: true
  noOutput: # Disables the generation of outputs in the CloudFormation Outputs section to avoid running into limit of 60 outputs. Set to false since CloudFormation output is used by Jazz.
    sbr-type: bool
    sbr-render: user-only
    sbr-value:
      sbr-default: false
      sbr-example: false

# works as expected when using sbr-formula only NOT with sbr-example
plugins:
   sbr-type: "[plugin]"
   sbr-render: merge
   sbr-mandatory: true
   sbr-value:
     sbr-formula:
       - serverless-plugin-log-subscription

# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    sbr-type: "[aws-var-name:resource]"
    sbr-render: user-only
    # The "Outputs" that your AWS CloudFormation Stack should produce.  This allows references between services.
  Outputs:
    sbr-type: "[aws-var-name:aws-var-value]"
    sbr-render: user-only

# ------------ Below we put all NON-PRIMARY types --------------------
aws-policy:
  sbr-primary: false
  sbr-type: sequence
  sbr-render: user-only
  sbr-template:
    - Effect:
        sbr-type: enum
        sbr-render: user-only
        sbr-constraint:
          sbr-enum:
            - Allow
            - Deny
      Principal:
        sbr-type: aws-principal
        sbr-render: user-only
      Resource:
        sbr-type: enum
        sbr-render: user-only
      Action:
        sbr-type: enum
        sbr-render: user-only
      Condition:
        IpAddress:
          aws:SourceIp:
            sbr-type: str
            sbr-render: merge
            sbr-value:
              sbr-formula:
                - ${config.ipList}
          aws:VpcSourceIp:
            sbr-type: str
            sbr-render: user-only
        NotIpAddress:
          aws:SourceIp:
            sbr-type: str
            sbr-render: user-only
          aws:VpcSourceIp:
            sbr-type: str
            sbr-render: user-only    
        StringEquals:
          aws:sourceVpce:
            sbr-type: str
            sbr-render: user-only
            sbr-value:
              sbr-formula:
                - ${config.vpceEndpoint}

function:
  sbr-primary: false
  sbr-type: sequence
  sbr-render: user-only
  sbr-template:
    handler:
      sbr-type: path
      sbr-render: user-only
      sbr-value:
        sbr-example: index.handler

    name:
      sbr-type: aws-artifact-name
      sbr-render: config-wins
      sbr-mandatory: true
      sbr-value:
        sbr-formula: ${config.domain}_${config.service}_${asterisk0}_${context.environment_logical_id}

    description:
      sbr-type: aws-description
      sbr-render: user-wins
      sbr-value:
        sbr-formula: Description for ${context.asterisk0} function

    memorySize: # memorySize in MB for this specific function.
      sbr-type: int
      sbr-render: user-wins
      sbr-mandatory: true
      sbr-constraint:
        sbr-from: 128
        sbr-to: 10240
      sbr-value:
        sbr-formula: ${config.providerMemorySize}
        sbr-example: 256

    reservedConcurrency:
      sbr-type: int
      sbr-render: user-only
      sbr-constraint:
        sbr-from: 0
        sbr-to: 100
      sbr-value:
        sbr-example: 5

    provisionedConcurrency:
      sbr-type: int
      sbr-render: user-only
      sbr-constraint:
        sbr-from: 0
        sbr-to: 100
      sbr-value:
        sbr-example: 3
    
    runtime:
      sbr-type: enum
      sbr-render: user-wins
      sbr-constraint:
        sbr-enum:
          - nodejs8.10
          - nodejs10.x
          - nodejs12.x
          - java8
          - java11
          - python3.6
          - python3.8
          - go1.x
      sbr-value:
        sbr-formula: ${config.providerRuntime}
        sbr-example: nodejs10.x

    timeout: # in seconds 1 sec to 15 mins
      sbr-type: int
      sbr-render: user-wins
      sbr-mandatory: true
      sbr-constraint:
        sbr-from: 1
        sbr-to: 900
      sbr-value:
        sbr-example: 30

    role: # none provided in config, serverless creates if not user provided
      sbr-type: arn-iam
      sbr-render: user-only
      sbr-value:
        sbr-formula: ${config.role}
        sbr-example: arn:aws:iam::XXXXXX:role/role

    onError: # Optional SNS topic / SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well) which will be used for the DeadLetterConfig
      sbr-type: arn-sns
      sbr-render: user-only
      sbr-value:
        sbr-example: arn:aws:sns:us-east-1:XXXXXX:sns-topic

    awsKmsKeyArn:  # Optional KMS key arn which will be used for encryption (overwrites the one defined on the service level)
      sbr-type: arn-kms
      sbr-render: user-only
      sbr-value:
        sbr-example: arn:aws:kms:us-east-1:XXXXXX:key/some-hash

    environment: # Function level environment variables
      sbr-type: "[aws-var-name:aws-tag-value]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          functionEnvVar: 12345678

    tags: # Function specific tags
      sbr-type: "[aws-var-name:aws-tag-value]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          foo: bar

    dependsOn:
      sbr-type: "[aws-id]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          - resource1
          - resource2
    
    maximumRetryAttempts: # accepts values between 0 and 2
      sbr-type: int
      sbr-render: user-wins
      sbr-mandatory: false
      sbr-constraint:
        sbr-from: 0
        sbr-to: 2
      sbr-value:
        sbr-example: 1

    maximumEventAge: # accepts values between 60 seconds and 6 hours, provided in seconds
      sbr-type: int
      sbr-render: user-wins
      sbr-mandatory: false
      sbr-constraint:
        sbr-from: 60
        sbr-to: 21600
      sbr-value:
        sbr-example: 60

    vpc: # Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
      securityGroupIds:
        sbr-type: "[aws-id]"
        sbr-render: user-only
        sbr-value:
          sbr-example:
            - securityGroupId1
            - securityGroupId2
      subnetIds:
        sbr-type: "[aws-id]"
        sbr-render: user-only
        sbr-value:
          sbr-example:
            - subnetId1
            - subnetId2

    package:
      include: # Specify the directories and files which should be included in the deployment package
        sbr-type: "[path]"
        sbr-render: user-only
        sbr-value:
          sbr-example:
            - .git/**
            - .travis.yml
      exclude: # Specify the directories and files which should be excluded in the deployment package
        sbr-type: "[path]"
        sbr-render: user-only
        sbr-value:
          sbr-example:
            - .git/**
            - .travis.yml
    excludeDevDependencies:
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-default: false
        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true
    artifact:
      sbr-type: path
      sbr-render: user-only
      sbr-value:
        sbr-example: path/to/my-artifact.zip # Own package that should be used. You must provide this file.

    individually: # Enables individual packaging for each function. If true you must provide package for each function. Defaults to false
      sbr-type: bool
      sbr-render: user-only
      sbr-value:
        sbr-default: false
        sbr-example: false # Config if Serverless should automatically exclude dev dependencies in the deployment package. Defaults to true

    layers: # An optional list Lambda Layers to use
      sbr-type: "[arn-layer]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          - arn:aws:lambda:region:XXXXXX:layer:LayerName:Y # Layer Version ARN

    lambdaAtEdge:
      distribution:
        sbr-type: str
        sbr-render: user-only
        sbr-value:
          sbr-example: 'WebsiteDistribution'
      eventType:
        sbr-type: str
        sbr-render: user-only
        sbr-value:
          sbr-example: 'origin-request'
      pathPattern:
        sbr-type: str
        sbr-render: user-only
        sbr-value:
          sbr-example: 'images/*.jpg'

    tracing:  # optional, can be 'Active' or 'PassThrough' (overwrites the one defined on the provider level)
      sbr-type: enum
      sbr-render: user-only
      sbr-constraint:
        sbr-enum:
          - Active
          - PassThrough
      sbr-value:
        sbr-example: Active

    events: # The Events that trigger this Function
      sbr-type: "[event]"
      sbr-render: user-only
    
    alarms: # Support for plugin - https://github.com/ACloudGuru/serverless-plugin-aws-alerts
      sbr-type: "[aws-id]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          - customAlarm

event:
  sbr-primary: false
  sbr-type: "[enum]"
  sbr-render: user-only
  sbr-template:
    - s3:
        bucket:
          sbr-type: aws-bucket-name
          sbr-render: user-only
          sbr-value:
            sbr-example: photos

        event:
          sbr-type: "[enum]"
          sbr-render: user-only
          sbr-constraint:
            sbr-whitelist: actions
          sbr-value:
            sbr-example:
              - s3:ObjectCreated:*
        rules:
          - prefix:
              sbr-type: path
              sbr-render: user-only
              sbr-value:
                sbr-example: uploads/
          - suffix:
              sbr-type: str
              sbr-render: user-only
              sbr-value:
                sbr-example: .jpg

    - httpApi: # HTTP API endpoint
        method:
         sbr-type: enum
         sbr-render: user-only
         sbr-constraint:
            sbr-enum:
              - GET
              - PUT
              - POST
              - DELETE
              - OPTIONS
        path:
          sbr-type: path
          sbr-render: user-only
          sbr-value:
            sbr-example: 'path/to/function'
        authorizer: # Optional
          name: # References by name authorizer defined in provider.httpApi.authorizers section
            sbr-type: aws-var-value
            sbr-render: user-only
            sbr-value:
              sbr-example: 'someJwtAuthorizer'

    - http:
        path:
          sbr-type: path
          sbr-render: user-only
          sbr-value:
            sbr-example: 'path/to/function'
        method:
          sbr-type: enum
          sbr-render: user-only
          sbr-constraint:
            sbr-enum:
              - GET
              - PUT
              - POST
              - DELETE
              - OPTIONS
        cors:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false
        async:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false
        integration:
          sbr-type: enum
          sbr-render: user-only
          sbr-constraint:
            sbr-enum:
              - lambda
              - http
              - lambda-proxy

        private:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false
        authorizer:
          name:
            sbr-type: aws-artifact-name
            sbr-render: user-only
            sbr-value:
              sbr-example: 'customauthorizer'
          arn:
            sbr-type: arn-lambda
            sbr-render: user-only
            sbr-value:
              sbr-example: arn:aws:lambda:region:XXXXXX:function:myfunc
          resultTtlInSeconds:
            sbr-type: int
            sbr-render: user-only
            sbr-value:
              sbr-example: 0
          identitySource:
            sbr-type: str
            sbr-render: user-only
            sbr-value:
              sbr-example: method.request.header.Authorization
          identityValidationExpression:
            sbr-type: str
            sbr-render: user-only
            sbr-value:
              sbr-example: someRegex
          type:
            sbr-type: enum
            sbr-render: user-only
            sbr-constraint:
              sbr-enum:
                - token
                - request

    - schedule:
        name:
          sbr-type: aws-artifact-name
          sbr-render: user-only
          sbr-value:
            sbr-example: 'Abrahadabrah'
        description:
          sbr-type: aws-description
          sbr-render: user-only
          sbr-value:
            sbr-example: The description for ${self.name}
        rate:
          sbr-type: aws-schedule-rate
          sbr-render: user-only
          sbr-value:
            sbr-example: rate(5 minutes)
        enabled:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false
        input:
          sbr-type: "[aws-var-name:aws-tag-value]"
          sbr-render: user-only
          sbr-value:
            sbr-example:
              key1: value1
              key2: value2
              stageParams:
                stage: dev

        inputPath:
          sbr-type: path
          sbr-render: user-only
          sbr-value:
            sbr-example: '$.stageVariables'
        inputTransformer:
          inputPathsMap:
            eventTime:
              sbr-type: str
              sbr-render: user-only
              sbr-value:
                sbr-example: '$.time'
          inputTemplate:
            sbr-type: json
            sbr-render: user-only
            sbr-value:
              sbr-example: '{"time": <eventTime>, "key1": "value1"}'

    - sqs: #https://docs.aws.amazon.com/lambda/latest/dg/API_EventSourceMappingConfiguration.html
        arn:
          sbr-type: arn-sqs
          sbr-render: user-only
          sbr-value:
            sbr-example: arn:aws:sqs:region:XXXXXX:myQueue
        batchSize:
          sbr-type: int
          sbr-render: user-only
          sbr-constraint:
            sbr-from: 3
            sbr-to: 10000
          sbr-value:
            sbr-example: 10
        maximumBatchingWindow:
          sbr-type: int
          sbr-render: user-only
          sbr-constraint:
            sbr-from: 0
            sbr-to: 300
          sbr-value:
            sbr-example: 10
        enabled:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false

    - stream:
        arn:
          sbr-type: arn-kinesis
          sbr-render: user-only
          sbr-value:
            sbr-example: arn:aws:kinesis:region:XXXXXX:myKineisisStream
        batchSize:
          sbr-type: int
          sbr-render: user-only
          sbr-constraint:
            sbr-from: 3
            sbr-to: 100
          sbr-value:
            sbr-example: 10
        startingPosition:
          sbr-type: enum
          sbr-render: user-only
          sbr-constraint:
            sbr-enum:
              - AT_SEQUENCE_NUMBER
              - AFTER_SEQUENCE_NUMBER
              - AT_TIMESTAMP
              - TRIM_HORIZON
              - LATEST
          sbr-value:
            sbr-example: LATEST
        enabled:
          sbr-type: bool
          sbr-render: user-only
          sbr-value:
            sbr-example: false

resource:
  sbr-primary: false
  sbr-type: sequence
  sbr-render: user-only
  sbr-template:
    Type:
      sbr-type: enum
      sbr-render: user-only
      sbr-constraint:
        sbr-whitelist: resources
      sbr-value:
        sbr-example: AWS::DynamoDB::Table
    DeletionPolicy:
      sbr-type: str
      sbr-render: user-only
    DependsOn:
      sbr-type: str
      sbr-render: user-only
    Properties:
      sbr-type: "[aws-var-name:aws-var-value]"
      sbr-render: user-only
      sbr-value:
        sbr-example:
          AttributeDefinitions:
            - AttributeName: email
              AttributeType: S
