# This pipeline is expected to be triggered with the following required PARAMS
# @Pipeline trigger params {SERVICE_NAME, DOMAIN, REQUEST_ID, ENVIRONMENT_ID(if required)} 

# Delete workflow for service/environment deletion
# @version: 2.0
# @author: Saurav Dutta

# added for CDP compliance: https://tmobile.gitlab.io/cdp/community-hub/documentation/COMMON/#usage
include:
  - project: 'tmobile/templates'
    ref: tmo/master
    file: '/gitlab-ci/.tmo.global.common.gitlab-ci.yml'

# exclude running pipeline on pushes for all jobs
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always

stages:
  - tmo
  - test
  - init
  - undeploy-service
  - cleanup

variables:
  API_BASE_URL: https://cloud-api.corporate.t-mobile.com/api/jazz
  GITLAB_BASE_URL: https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/
  SCRIPTS_REPO: https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/jazz-pipeline-module.git
  REPO_BASE_URL: https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/shared/
  SERVERLESS_CONFIG_REPO:  https://$GITLAB_SVC_ACCT_USER:$GITLAB_SVC_ACCT_PASSWORD@gitlab.com/tmobile/jazz/core/serverless-config-pack.git
  DOCKER_IMAGE: registry.gitlab.com/tmobile/jazz/core/packages/base:1.0.0
  DOCKER_IMAGE_TAG: "1.0.0"
  WORKING_DIRECTORY: WorkingDirectory
  WORKING_MODULE_DIRECTORY: $WORKING_DIRECTORY/jazz-pipeline-module
  EVENT_TYPE: SERVICE_DELETION
  EVENT_HANDLER: GITLAB_CI
  AWS_DEFAULT_REGION: us-west-2
  NOTIFICATION_TYPE: SERVICE DELETION

init-validation:
  stage: init
  image: "$DOCKER_IMAGE"
  script:
    - curl ifconfig.co
    - git clone -b master --depth 1 $SCRIPTS_REPO $WORKING_MODULE_DIRECTORY    # Cloning build module
      #Creating PipelineLogs repo
    - mkdir -p $WORKING_DIRECTORY/PipelineLogs
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/initModule.groovy initializeModules
  artifacts:
    paths:
      - $WORKING_DIRECTORY
    when: always

undeploy-service:
  stage: undeploy-service
  image: "$DOCKER_IMAGE"
  script:
    - curl ifconfig.co 
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/deleteServiceModule.groovy undeployService
  artifacts:
    paths:
      - $WORKING_DIRECTORY
    when: always

backup-cleanup:
  stage: cleanup
  image: "$DOCKER_IMAGE"
  script:
    - curl ifconfig.co 
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/Login.groovy  getAuthToken  || exit 1  #Renewing the token
    - groovy -cp $WORKING_MODULE_DIRECTORY/ $WORKING_MODULE_DIRECTORY/ConfigLoader.groovy   getConfigData || exit 1  #getting config data
    - echo "ENVIRONMENT_ID= $ENVIRONMENT_ID"
    - groovy -cp $WORKING_MODULE_DIRECTORY/ scripts/backupModule.groovy backupService
  rules:
    - if: '$ENVIRONMENT_ID == null'
      when: always
    - when: never
  artifacts:
    paths:
      - $WORKING_DIRECTORY
    when: always
